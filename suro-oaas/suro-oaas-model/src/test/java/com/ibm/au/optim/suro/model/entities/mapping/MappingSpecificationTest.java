package com.ibm.au.optim.suro.model.entities.mapping;

import org.junit.Assert;
import org.junit.Test;

import com.ibm.au.optim.suro.model.entities.mapping.MappingSpecification;



/**
 * Class <b>MappingSpecificationTest</b>. This class tests the implemented
 * behaviour of the {@link MappingSpecification} class. This class is used
 * to contain the definition of a mapping of data source attributes to cells
 * in the tabular view generated by an output mapping.
 * 
 * @author Peter Ilfrich and Christian Vecchiola
 */
public class MappingSpecificationTest {


	/**
	 * This method tests the implemented behaviour of the {@link MappingSpecification#MappingSpecification()}
	 * constructor. The method is expected to leave all the properties of the instance set to the default
	 * values identified by their underlying types.
	 */
    @Test
    public void testDefaultConstructor() {
    	
        MappingSpecification spec = new MappingSpecification();
        
        Assert.assertNull(spec.getLabels());
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));
        
        Assert.assertNull(spec.getEntryKeys());
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));

    }
    
    /**
     * This method tests the implemented behaviour of the {@link MappingSpecification#MappingSpecification(String[], String[])}
     * constructor. This method is expected to initialise the array of labels and entry keys with the given values and to copy
     * them into the corresponding array properties, if these arguments are not {@literal null}. The different combinations of
     * the parameters are explored to ensure that the initialisation works as expected.
     */
    @Test
    public void testConstructorWithStringArrays() {
    	
    	
    	// Test 1. (null, null) - it should the be the same as the default constructor.
    	//
        MappingSpecification spec = new MappingSpecification((String[]) null, (String[]) null);
        
    	Assert.assertNull(spec.getLabels());
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));
    	
    	Assert.assertNull(spec.getEntryKeys());
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
        
        
        // Test 2. (null, []) - should be null for labels and an empty array for entry keys.
        //
        String[] expectedKeys = new String[] {};
        spec = new MappingSpecification((String[]) null, expectedKeys);
        
    	Assert.assertNull(spec.getLabels());
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));    
        
        String[] actualKeys = spec.getEntryKeys();
        Assert.assertNotNull(actualKeys);
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
        Assert.assertNotEquals(expectedKeys, actualKeys);
        
        // Test 3. (null, [....]) - shoudl be null for labels and an empty array for entry keys.
        //
        expectedKeys = new String[] { "SabreTooth", "Magneto", "Mystique" };
        spec = new MappingSpecification((String[]) null, expectedKeys);
        
    	Assert.assertNull(spec.getLabels());
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));    
        
        actualKeys = spec.getEntryKeys();
        Assert.assertNotNull(actualKeys);
        Assert.assertTrue(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(expectedKeys.length));
        Assert.assertFalse(expectedKeys == actualKeys);
        Assert.assertArrayEquals(expectedKeys, actualKeys);
        
        // Test 4. ([], null) - should be an empty array for labels, and null for the entry keys.
        //
        
        String[] expectedLabels = new String[] {};
        spec = new MappingSpecification(expectedLabels, null);
        
        String[] actualLabels = spec.getLabels();
        Assert.assertNotNull(actualLabels);
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));
        Assert.assertFalse(expectedLabels == actualLabels);
        Assert.assertArrayEquals(expectedLabels, actualLabels);
        
    	Assert.assertNull(spec.getEntryKeys());
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
        
        // Test 5. ([....], null) - should be an non empty array for labels, and null for the entry keys.
        //
        
        expectedLabels = new String[] { "Cyclops", "Marvel Girl", "Iceman" };
        spec = new MappingSpecification(expectedLabels, null);
        
        actualLabels = spec.getLabels();
        Assert.assertNotNull(actualLabels);
        Assert.assertTrue(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(expectedLabels.length));
        Assert.assertFalse(expectedLabels == actualLabels);
        Assert.assertArrayEquals(expectedLabels, actualLabels);
        
    	Assert.assertNull(spec.getEntryKeys());
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
        
        
      
    	
    }

    /**
     * This method tests the implemented behaviour of the {@link MappingSpecification#MappingSpecification(String, String)}
     * constructor. The method is expected to create the corresponding array properties for the parameters passed. This only
     * happens if these parameters are not {@literal null}. The different parameters combinations are explored to ensure that
     * the initialisation work as expected.
     */
    @Test
    public void testConstructorWithStrings() {
    	
    	// Test 1. (null, null) - it should be the same as the default constructor.
    	//
    	MappingSpecification spec = new MappingSpecification((String) null, (String) null);
        
    	Assert.assertNull(spec.getLabels());
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));
    	
    	Assert.assertNull(spec.getEntryKeys());
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
        
        
        // Test 2. (null, string) - the array of entry keys should not be null.
        
        String expectedKey = "Superman";
    	spec = new MappingSpecification((String) null, expectedKey);
        
    	Assert.assertNull(spec.getLabels());
        Assert.assertFalse(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(0));
    	
        String[] actualKeys = spec.getEntryKeys();
    	Assert.assertNotNull(actualKeys);
        Assert.assertTrue(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(1));
        Assert.assertEquals(expectedKey, actualKeys[0]);
        
        // Test 3. (string, null) - the array of labels should not be null.
        
        String expectedLabel = "Clark Kent";
    	spec = new MappingSpecification(expectedLabel, (String) null);
    	
        String[] actualLabels = spec.getLabels(); 
    	Assert.assertNotNull(actualLabels);
        Assert.assertTrue(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(1));
        Assert.assertEquals(expectedLabel, actualLabels[0]);
        
    	Assert.assertNull(spec.getEntryKeys());
        Assert.assertFalse(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
    	
        // Test 3. (string, string) - the both arrays should not be null.

    	spec = new MappingSpecification(expectedLabel, expectedKey);
    	
        actualLabels = spec.getLabels(); 
    	Assert.assertNotNull(actualLabels);
        Assert.assertTrue(spec.hasLabels());
        Assert.assertTrue(spec.hasNumberOfLabels(1));
        Assert.assertEquals(expectedLabel, actualLabels[0]);
        
        actualKeys = spec.getEntryKeys();
    	Assert.assertNotNull(actualKeys);
        Assert.assertTrue(spec.hasEntryKeys());
        Assert.assertTrue(spec.hasNumberOfEntryKeys(1));    
        Assert.assertEquals(expectedKey, actualKeys[0]);	

    }

    /**
     * This method tests the implementation of the getter and the setter methods for the
     * <i>labels</i> property. There is no specific restriction to the value that can be
     * assigned to the property. The default value is {@literal null}, and the getter 
     * should return either the initialised array for the labels or the value set with the
     * setter.
     */
    @Test
    public void testGetSetLabels() {
    	
    	// Test 1. By default we get the value passed as parameters.
    	//
        MappingSpecification spec = new MappingSpecification();
        Assert.assertNull(spec.getLabels());
        
        
        // Test 2. We set a list of values and we se whether we get them
        //         with the getter.

    	String[] expected = new String[] { "Vein", "Darkseid"  };
        spec.setLabels(expected);
        String[] actual = spec.getLabels();
        Assert.assertNotNull(actual);
        Assert.assertFalse(expected == actual);
        Assert.assertArrayEquals(expected, actual);
        
        
        // Test 3. We add an empty array.
        //
        expected = new String[] {};
        spec.setLabels(expected);
        actual = spec.getLabels();
        Assert.assertNotNull(actual);
        Assert.assertFalse(expected == actual);
        Assert.assertArrayEquals(expected, actual);     
        
        // Test 4. We set the property to null.
        //
        spec.setLabels(null);
        Assert.assertNull(spec.getLabels());
        
    }

    /**
     * This method tests the implementation of the getter and the setter methods for the
     * <i>entryKeys</i> property. There is no specific restriction to the value that can 
     * be assigned to the property. The default value is {@literal null}, and the getter 
     * should return either the initialised array for the entry keys or the value set with 
     * the setter.
     */
    @Test
    public void testGetSetEntryKey() {
    	
    	// Test 1. By default we get the value passed as parameters.
    	//
        MappingSpecification spec = new MappingSpecification();
        Assert.assertNull(spec.getEntryKeys());
        
        
        // Test 2. We set a list of values and we se whether we get them
        //         with the getter.

    	String[] expected = new String[] { "Vein", "Darkseid"  };
        spec.setEntryKeys(expected);
        String[] actual = spec.getEntryKeys();
        Assert.assertNotNull(actual);
        Assert.assertFalse(expected == actual);
        Assert.assertArrayEquals(expected, actual);
        
        
        // Test 3. We add an empty array.
        //
        expected = new String[] {};
        spec.setEntryKeys(expected);
        actual = spec.getEntryKeys();
        Assert.assertNotNull(actual);
        Assert.assertFalse(expected == actual);
        Assert.assertArrayEquals(expected, actual);     
        
        // Test 4. We set the property to null.
        //
        spec.setEntryKeys(null);
        Assert.assertNull(spec.getLabels());

    }

    
    /**
     * This method tests the implemented behaviour of the {@link MappingSpecification#hasLabels()} that is used
     * to check whether the mapping specification does include any label. It should return {@literal false} if
     * the labels array is empty or {@literal null}, {@literal true} otherwise.
     */
    @Test
    public void testHasLabels() {
    	
    	// Test 1. By default it should return false.
    	//
    	
    	MappingSpecification spec = new MappingSpecification();
    	Assert.assertFalse(spec.hasLabels());
    	
    	// Test 2. When we set a non empty array, this should
    	//         return true.
    	
    	String[] labels = new String[] { "Spiderman", "Wonder Woman", "Batman" };
    	spec.setLabels(labels);
    	Assert.assertTrue(spec.hasLabels());
    	
    	// Test 3. When we set an empty array, it should return false.
    	//
    	labels = new String[] {};
    	spec.setLabels(labels);
    	Assert.assertFalse(spec.hasLabels());
    	
    	// Test 4. When we set null, it shoudl return false.
    	//
    	labels = null;
    	spec.setLabels(labels);
    	Assert.assertFalse(spec.hasLabels());
    	
    }
    
    /**
     * This method tests the implemented behaviour of the {@link MappingSpecification#hasEntryKeys()} that is used
     * to check whether the mapping specification does include any entry key. It should return {@literal false} if
     * the entry keys array is empty or {@literal null}, {@literal true} otherwise.
     */
    @Test
    public void testHasEntryKeys() {
    	
    	// Test 1. By default it should return false.
    	//
    	
    	MappingSpecification spec = new MappingSpecification();
    	Assert.assertFalse(spec.hasEntryKeys());
    	
    	// Test 2. When we set a non empty array, this should
    	//         return true.
    	
    	String[] entryKeys = new String[] { "Spiderman", "Wonder Woman", "Batman" };
    	spec.setEntryKeys(entryKeys);
    	Assert.assertTrue(spec.hasEntryKeys());
    	
    	// Test 3. When we set an empty array, it should return false.
    	//
    	entryKeys = new String[] {};
    	spec.setEntryKeys(entryKeys);
    	Assert.assertFalse(spec.hasEntryKeys());
    	
    	// Test 4. When we set null, it shoudl return false.
    	//
    	entryKeys = null;
    	spec.setEntryKeys(entryKeys);
    	Assert.assertFalse(spec.hasEntryKeys());
    	
    }

    /**
     * This method tests the implemented behaviour of the {@link MappingSpecification#hasNumberOfLabels(int)}
     * that is used to check how many labels have been defined for the mapping specification. The method should
     * return 0 if the labels array is null or empty, and the corresponding number of elements in the other cases.
     */
    @Test
    public void testHasNumberOfLabels() {
    	
    	// Test 1. by default it should much to 0.
    	//

    	MappingSpecification spec = new MappingSpecification();
    	Assert.assertTrue(spec.hasNumberOfLabels(0));
    	
    	// Test 2. When we set a non empty array, this should
    	//         return true.
    	
    	String[] labels = new String[] { "Spiderman", "Wonder Woman", "Batman" };
    	spec.setLabels(labels);
    	Assert.assertTrue(spec.hasNumberOfLabels(labels.length));
    	
    	// Test 3. When we set an empty array, it should return false.
    	//
    	labels = new String[] {};
    	spec.setLabels(labels);
    	Assert.assertTrue(spec.hasNumberOfLabels(0));
    	
    	// Test 4. When we set null, it shoudl return false.
    	//
    	labels = null;
    	spec.setLabels(labels);
    	Assert.assertTrue(spec.hasNumberOfLabels(0));

    }
    /**
     * This method tests the implemented behaviour of the {@link MappingSpecification#hasNumberOfEntryKeys(int)}
     * that is used to check how many entry keys have been defined for the mapping specification. The method should
     * return 0 if the entry keys array is null or empty, and the corresponding number of elements in the other cases.
     */
    @Test
    public void testHasNumberOfEntryKeys() {
    	
    	// Test 1. by default it should much to 0.
    	//

    	MappingSpecification spec = new MappingSpecification();
    	Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
    	
    	// Test 2. When we set a non empty array, this should
    	//         return true.
    	
    	String[] entryKeys = new String[] { "Spiderman", "Wonder Woman", "Batman" };
    	spec.setEntryKeys(entryKeys);
    	Assert.assertTrue(spec.hasNumberOfEntryKeys(entryKeys.length));
    	
    	// Test 3. When we set an empty array, it should return false.
    	//
    	entryKeys = new String[] {};
    	spec.setEntryKeys(entryKeys);
    	Assert.assertTrue(spec.hasNumberOfEntryKeys(0));
    	
    	// Test 4. When we set null, it shoudl return false.
    	//
    	entryKeys = null;
    	spec.setEntryKeys(entryKeys);
    	Assert.assertTrue(spec.hasNumberOfEntryKeys(0));

    }
    
    /**
     * This method tests the implemented behaviour of {@link MappingSpecification#clone()}. The
     * method is expected to create a deep copy of the original instance. The cloned instance 
     * is expected to pass the equality test if compared with the original one.
     */
    @Test
    public void testClone() {
    	
    	// Test 1. Use a fresh instance and clone it..
    	//
    	MappingSpecification expected = new MappingSpecification();
    	MappingSpecification actual = expected.clone();
    	
    	Assert.assertNotNull(actual);
    	Assert.assertFalse(expected == actual);
    	Assert.assertEquals(expected, actual);
    	
    	
    	// Test 2. We create an instance and configure it and see 
    	//         whether the cloned instance does relfect our
    	//         expectations.
    	
    	expected.setLabels(new String[] { "Doctor Doom", "Quick Silver",  "Torch", } );
    	expected.setEntryKeys(new String[] { "Flash", "Green Lantern", "Hawkman" });
    	
    	actual = expected.clone();
    	Assert.assertNotNull(actual);
    	
    	Assert.assertFalse(expected == actual);
    	Assert.assertEquals(expected, actual);
    	
    	Assert.assertFalse(expected.getLabels() == actual.getLabels());
    	Assert.assertArrayEquals(expected.getLabels(), actual.getLabels());
    	
    	Assert.assertFalse(expected.getEntryKeys() == actual.getEntryKeys());
    	Assert.assertArrayEquals(expected.getEntryKeys(), actual.getEntryKeys());
    	
    	
    	
    }
    
	/**
	 * This method tests the implemented behaviour of the {@link MappingSpecification#equals(Object)}.
	 * The method is expected to return {@literal true} if an instance is compared with itself or a
	 * different instance of {@link MappingSpecification} that has the same values (e.g. a cloned one).
	 * In all the other cases it should return {@literal false}.
	 */
	@Test 
	public void testEquals() {
		
		// Test 1. Obviousness test
		//
		MappingSpecification expected = new MappingSpecification();
		Assert.assertTrue(expected.equals(expected));
		
		
		// Test 2. It should return false when compared to null.
		//
		Assert.assertFalse(expected.equals(null));
		
		
		// Test 3. It should return false, when compared with an instance of an incompatible type.
		//
		Assert.assertFalse(expected.equals(new Double(34.2)));
		
		
		// Test 4. It should return true, if we clone the instance and then compare with the original.
		//
		expected.setLabels(new String[] { "Colossus", "Archangel", "Beast" });
		expected.setEntryKeys(new String[] { "Piotr Nikolaievitch Rasputin", "Warren Worthington III", "Henry Philip 'Hank' McCoy" });
		
		MappingSpecification actual = expected.clone();
		Assert.assertEquals(expected, actual);
		
		// Test 5. We change properties and we verify that equals responds accordingly.
		//
		expected.setEntryKeys(new String[] {});
		Assert.assertFalse(expected.equals(actual));
		
		// ok getting back to the previos state..
		//
		expected.setEntryKeys(actual.getEntryKeys());
		expected.setLabels(new String[] { "", "" });
		Assert.assertFalse(expected.equals(actual));
		
		
	}


}
