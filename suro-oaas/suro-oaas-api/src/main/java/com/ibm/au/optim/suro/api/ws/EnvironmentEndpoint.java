/**
 * 
 */
package com.ibm.au.optim.suro.api.ws;

import javax.websocket.CloseReason;
import javax.websocket.EndpointConfig;
import javax.websocket.OnClose;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.au.jaws.web.core.runtime.Environment;

/**
 * Class <b>EnvironmentEndpoint</b>. This class wraps some of the capabilities that
 * are common to the two server endpoints that are exposed by the application. This
 * class basically provides an easy access to the {@link Environment} implementation
 * that is configured by the corresponding {@link EnvironmentInjectorCondig} class
 * used to setup the server endpoints.
 * 
 * @author Christian Vecchiola
 *
 */
public class EnvironmentEndpoint {
	
	/**
	 * A {@link Logger} instance that is used to collect and record into a centrl logging
	 * system all the messages generated by instances of this class.
	 */
	private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentEndpoint.class);
	/**
	 * An {@link EndpointConfig} implementation that was used to setup the connection with
	 * the client socket.
	 */
	private EndpointConfig config;
	/**
	 * A {@link Environment} implementation pointing to the configured instance with the web 
	 * application that hosting this endpoint.
	 */
	private Environment environment;
	
	/**
	 * This is the handler that is invoked when there is a connection request from a web client
	 * socket.
	 * 
	 * @param session	a {@link Session} containing the information about the connection client
	 * 					socket.
	 * @param config	a {@link EndpointConfig} implementation that can be used to further
	 * 					configure the endpoint. This should be of type {@link EnvironmentInjectorConfig}.
	 */
	@OnOpen
	public void onOpen(Session session, EndpointConfig config) {
		
		this.config = config;
		
		if (config instanceof EnvironmentInjectorConfig) {
			
			this.environment = ((EnvironmentInjectorConfig) config).getEnvironment();
		
		} else {
			
			this.environment = (Environment) session.getUserProperties().get(Environment.ENVIRONMENT_DEFAULT_INSTANCE);
			
		}
	}
	
	/**
	 * This is the method that is used to respond to the web socket client messages. The method
	 * implements a simple response to the <i>ping</i> message. This is to comply with the basic
	 * heart-bet protocol that ensures that the web socket on the server side is alive.
	 * 
	 * @param message	a {@link String} representing the message sent by the client.
	 * @param session	a {@link Session} containing the information about the connection to the
	 * 					web client socket.
	 * 
	 * @return	a {@link String} representing the response message sent to the client.
	 */
	@OnMessage
	public String onMessage(String message, Session session) {
		
		LOGGER.info(String.format("[%s] WS Message Received [message: %s]", session.getId(), message));
		String response = "{\"heartbeat\":\"pong\"}";
		LOGGER.info(String.format("[%s] WS Message Sent [message: %s]", session.getId(), response));
		
		return response;
	}
	/**
	 * This is the handler that manages the closing of the web socket session.
	 * 
	 * @param session	a {@link Session} containing the information about the connection to the
	 * 					web client socket that is closing the connection.
	 * @param reason	a {@link CloseReason} instance encapsulating the reason why the connection
	 * 					is closed.
	 */
	@OnClose
	public void onClose(Session session, CloseReason reason) {
		
		this.environment = null;
	}
	/**
	 * Gets the {@link Environment} implementation (if any) that was configured with the web
	 * application that is hosting the endpoint. This is used to collect configuration parameters
	 * and other information through a single point of access.
	 * 
	 * @return	an {@link Environment} implementation or {@literal null}.
	 */
	protected Environment getEnvironment() {
		
		return this.environment;
	}
}
