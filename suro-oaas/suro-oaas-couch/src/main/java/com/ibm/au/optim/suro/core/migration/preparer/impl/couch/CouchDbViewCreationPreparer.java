/**
 * 
 */
package com.ibm.au.optim.suro.core.migration.preparer.impl.couch;

import org.ektorp.CouchDbConnector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.au.optim.suro.model.store.DatabasePreparer;
import com.ibm.au.jaws.web.core.runtime.Environment;

/**
 * <p>
 * Class <b>CouchDbViewCreationPreparer</b>. This is the base class for all the {@link DatabasePreparer}
 * instances that operate against a <i>CouchDb</i> database. This class simply loads the view information
 * into an array of {@link CouchDbViewUpdate} instances who do the heavy lifting of checking and updating
 * the views.
 * </p>
 * <p>
 * The class is abstract and provides two extension methods that are used to specialise the way in which
 * the list of {@link CouchDbViewUpdate} instances are retrieved, and the way in which a corresponding 
 * {@link CouchDbConnector} instance for each {@link CouchDbViewUpdate} object is retrieved.
 * </p>
 * 
 * 
 * @author Christian Vecchiola
 *
 */
public abstract class CouchDbViewCreationPreparer implements DatabasePreparer {
	
	/**
	 * A {@link Logger} instance that collects all the messages generated by instances of this class.
	 */
	private static final Logger LOGGER = LoggerFactory.getLogger(CouchDbViewCreationPreparer.class);

	/**
	 * The array of {@link CouchDbViewUpdate} instances that are used to check and
	 * update the content of the <i>CouchDb</i> instance that holds the views.
	 */
	protected CouchDbViewUpdate[] views;
	
	
	/**
	 * This method checks that all the views that are stored in the <i>CouchDb</i> are
	 * as defined locally in the module and therefore compliant with what is needed by
	 * the code.
	 * 
	 * @param env	an {@link Environment} implementation that provides access to the
	 * 				shared environment of the web application where components are
	 * 				placed. This is the instance through which all the repository
	 * 				implementations are retrieved.
	 * 
	 * @return	a {@literal boolean} that is {@literal true} if there is also a single
	 * 			view that needs to be updated.
	 * 
	 * @throws Exception	if there is any error. Currently all the exception are
	 * 						caught, except those that truly show an inconsistence in
	 * 						the use of the classes.
	 */
    @Override
    public boolean check(Environment env) throws Exception {
        
    	// reset missing views list (for validation)
        this.views = this.getViews();

        boolean isToUdpate = false;
        
        if (this.views.length > 0) {
        
        	for(int i=0; i<this.views.length; i++) {
        		
        		CouchDbViewUpdate vu = this.views[i];
        		
        		CouchDbConnector connector = this.getConnector(vu, env);
        		
        		if (connector != null) {
        		
        			vu.setConnector(connector);
    			
        			// we check whether everything is in line with what we expect.
        			//
        			boolean oneCheck = vu.checkForUpdates();
        		
        			isToUdpate = isToUdpate || oneCheck;
        			
        		} else {
        			
        			LOGGER.error("No connection information for [viewName: " + vu.getDocName() + "], skipping check.");
        		}
        		

        	}
	        
        
        } 
        
        return isToUdpate;
    }

    /**
     * This method executes the required updates to the views in <i>CouchDb</i>. All those
     * views that are out of synch are updated.
     * 
     * @param env		an {@link Environment} implementation that provides access to the
     * 					collection of shared instances of the web application.
     * 
     * @throws Exception	if there is any error occurring during the update. Currently,
     * 						most of the exceptions are caught and only those that identify
     * 						the inconsistent use of the components will be thrown.
     */
    @Override
    public void execute(Environment env) throws Exception {
    	
        for (CouchDbViewUpdate view : this.views) {
            if (view.needsUpdate()) {
                view.update();
            }
        }
    }
    

    /**
     * This method validates that all the updates to the views have been executed successfully.
     * 
     * @param env		an {@link Environment} implementation that provides access to the
     * 					collection of shared instances of the web application.
     * 
     * @return	{@literal true} if all the updates have been positively completed. {@literal false}
     * 			if even a single view has not been successfully updated.
     * 
     * @throws Exception	if there is any error occurring during the update. Currently,
     * 						most of the exceptions are caught and only those that identify
     * 						the inconsistent use of the components will be thrown.
     */
    @Override
    public boolean validate(Environment env) throws Exception {
    	
    	boolean isValid = true;

        for (CouchDbViewUpdate view : this.views) {
            if (view.getConnector() != null) {
                
            	boolean isUpdated = view.isUpdated();
            	if (isUpdated == false) {
            		
            		LOGGER.warn("View document: '" + view.getDocName() + "' has not been updated.");
            	}
            	isValid = isValid && isUpdated;
                
            }
        }
    	
    	return isValid;
    }
    
    /**
     * This method retrieves the specific {@link CouchDbConnector} instance that is used
     * to provide a live connection to the <i>CouchDb</i> database that stores the information
     * about the view represented by <i>vu</i>.
     * 
     * @param vu	a {@link CouchDbViewUpdate} instance containing the metadata that define
     * 				a view that needs to be checked for updates.
     * 
     * @param env	a {@link Environment} implementation that can be used to retrieve additional
     * 				information for obtaining a {@link CouchDbConnector} instance.
     * 
     * @return	a {@link CouchDbConnector} instance that can be used to check and eventually
     * 			update the view represeted by <i>vu</i> or {@literal null} if not found.
     */
    protected abstract CouchDbConnector getConnector(CouchDbViewUpdate vu, Environment env);
    
    /**
     * Gets the list of {@link CouchDbViewUpdate} instances containing the metadata about the
     * views that need to be checked and updated.
     * 
     * @return	an array of {@link CouchDbViewUpdate} instances.
     */
    protected abstract CouchDbViewUpdate[] getViews();
    
}
