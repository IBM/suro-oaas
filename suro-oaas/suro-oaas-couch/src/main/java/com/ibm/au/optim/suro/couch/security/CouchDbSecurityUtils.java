/**
 * 
 */
package com.ibm.au.optim.suro.couch.security;

import java.util.Map;

import com.ibm.au.optim.suro.couch.CouchDbConnectionMetadata;
import com.ibm.au.jaws.web.core.runtime.Environment;

/**
 * @author Christian Vecchiola
 *
 */
public class CouchDbSecurityUtils {
	
	/**
	 * A {@link String} constant that is used to filter the settings that identity the information
	 * to set up the connection to the <i>CouchDb</i> instance that is used to provide backing
	 * store for the security manager.
	 */
	public static final String SECURITY_PREFIX 	= "security";
	
	/**
	 * This method generates connection information by collecting the information from the given
	 * {@link Environment} properties. The method first checks whether there is a collection of
	 * properties that have the {@link CouchDbSecurityUtils#SECURITY_PREFIX}. If there is a complete
	 * set of such properties these are used to create a {@link CouchDbConnectionMetadata} instance
	 * otherwise <i>url<i> and <i>database</i> are defaulted to the standard <i>CouchDb</i> configuration
	 * parameters. For what concerns <i>username</i> and <i>password</i> these are considered in pair,
	 * either they are found with the security prefix or in the standard configuration parameters.
	 * 
	 * @param environment	a {@link Environment} implementation that contains the configuration
	 * 						parameters that are used to initialise the components.
	 * 
	 * @return	a {@link CouchDbConnectionMetadata} instance that wraps the connection information
	 * 			that have been selected from the <i>environment</i>.
	 */
	public static CouchDbConnectionMetadata getConnectionMetadata(Environment environment) {
		
		// we first look whether there is some specific setting for the security
		// if not we fallback to the default ones.
		//
		Map<String,String> export = environment.exportParameters(CouchDbSecurityUtils.SECURITY_PREFIX, true);
		
		String url = export.get(CouchDbConnectionMetadata.COUCHDB_URL);
		String database = export.get(CouchDbConnectionMetadata.COUCHDB_DATABASE);
		String username = export.get(CouchDbConnectionMetadata.COUCHDB_USERNAME);
		String password = export.get(CouchDbConnectionMetadata.COUCHDB_PASSWORD);
		
		url = (url != null ? url : environment.getParameter(CouchDbConnectionMetadata.COUCHDB_URL, null));
		database = (database != null ? database : environment.getParameter(CouchDbConnectionMetadata.COUCHDB_DATABASE, null));
		
		// for the username and the password it does not make sense to do one by one
		// they should be going together.
		
		if (username == null) {
			
			username = environment.getParameter(CouchDbConnectionMetadata.COUCHDB_USERNAME);
			password = environment.getParameter(CouchDbConnectionMetadata.COUCHDB_PASSWORD);
		}
		
		CouchDbConnectionMetadata metadata = new CouchDbConnectionMetadata(url, database, username, password);
		
		return metadata;
		
	}
	
	/**
	 * <p>
	 * This method converts a collection of attributes (<i>source</i>) that comes from the
	 * <i>CouchDb</i> database into a collection of attributes that can used to create
	 * instances of {@link CouchDbSession}, {@link CouchDbRule}, or {@link CouchDbRule}. 
	 * </p>
	 * <p>
	 * The method essentially substitutes the {@link CouchDbSecurityEntity#PROPERTY_COUCHDB_ID} with
	 * the {@link CouchDbSecurityEntity#PROPERTY_ID} by retaining the original value.
	 * </p>
	 * 
	 * @param source	a {@link Map} implementation that contains the attributes mapped to
	 * 					their values of the document that has been retrieved by the <i>CouchDb</i>
	 * 					database.
	 * 					 
	 * @return	a {@link Map} implementation that contains the attributes of <i>source</i>
	 * 			modified to create instances.
	 */
	public static Map<String, Object> fromDatabase(Map<String,Object> source) {
		
		String id = (String) source.remove(CouchDbSecurityEntity.PROPERTY_COUCHDB_ID);
		source.put(CouchDbSecurityEntity.PROPERTY_ID, id);
		source.remove(CouchDbSecurityEntity.PROPERTY_SECURITY);
	
		return source;
	}
	/**
	 * <p>
	 * This method converts a collection of attributes (<i>source</i>) that has been generated
	 * from a {@link CouchDbSession}, {@link CouchDbRule}, or {@link CouchDbRule} instance into
	 * a collection of attributes that can be inserted into a <i>CouchDb</i> database.
	 * </p>
	 * <p>
	 * The method essentially substitutes the {@link CouchDbSecurityEntity#PROPERTY_ID} with
	 * the {@link CouchDbSecurityEntity#PROPERTY_COUCHDB_ID} by retaining the original value.
	 * </p>
	 * 
	 * @param source	a {@link Map} implementation that has been generated by an instance of
	 * 					{@link CouchDbRule}, {@link CouchDbUser} or {@link CouchDbSession} types.
	 * 
	 * @return 	a {@link Map} implementation that contains the collection of attributes that 
	 * 			represent an entity that can be inserted into a <i>CouchDb</i> database.
	 */
	public static Map<String, Object> toDatabase(Map<String, Object> source) {
		
		String id = (String) source.remove(CouchDbSecurityEntity.PROPERTY_ID);
		if (id != null) {
			source.put(CouchDbSecurityEntity.PROPERTY_COUCHDB_ID, id);
		}
		source.put(CouchDbSecurityEntity.PROPERTY_SECURITY, CouchDbSecurityEntity.SECURITY_VERSION);
		
		return source;
	}
}
