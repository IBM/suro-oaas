/**
 * 
 */
package com.ibm.au.optim.suro.core.migration.preparer.impl.couch.v005;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import org.ektorp.ViewQuery;
import org.ektorp.support.DesignDocument;
import org.ektorp.support.DesignDocument.View;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ibm.au.jaws.data.utils.map.MapUtils;

/**
 * Class <b>CouchDbContentTransformation</b>. This class extends {@link CouchDbDocumentTransformation}
 * and provides the ability to migrate all the document to the format that has been used since version
 * 0.0.4, which includes the <i>content</i> attribute storing all the document specific attributes.
 * 
 * @author Christian Vecchiola
 *
 */
public class CouchDbContentTransformation extends CouchDbDocumentTransformation {

	/**
	 * A {@link Logger} instance that collects all the log messages generated by the instances of 
	 * this class.
	 */
	private static final Logger LOGGER = LoggerFactory.getLogger(CouchDbContentTransformation.class);
	
	/**
	 * A {@link String} constant representing the name of the document unique identifier.
	 */
	public static final String COUCHDB_ID = "_id";
	/**
	 * A {@link String} constant representing the name of the revision attribute used in <i>CouchDb</i>.
	 */
	public static final String COUCHDB_REVISION = "_rev";
	/**
	 * A {@link String} constant representing the name of the attachments attribute in <i>CouchDb</i>.
	 */
	public static final String COUCHDB_ATTACHMENTS = "_attachments";
	/**
	 * A {@link String} constant representing the prefix used for the type discriminator in the <i>CouchDb</i>
	 * documents when managed through the <i>Ektorp</i> library.
	 */
	public static final String COUCHDB_DISCRIMINATOR_PREFIX = "cdb";
	
	/**
	 * A {@link String} array containing the list of attributes that identify those documents that should
	 * not be transformed. This array is used to build the dynamic view that retrieves all those documents
	 * that do not have any of the attributes mentioned in the array.
	 */
	protected String[] excludeTriggers = new String[] { CouchDbDocumentTransformation.DOCUMENT_CONTENT_ATTRIBUTE };
	
	/**
	 * This is a reference to the dynamic view created to select the documents.
	 */
	protected DesignDocument view = null;
	
	/**
	 * Initialises an instance of {@link CouchDbContentTransformation}.
	 */
	public CouchDbContentTransformation() {
		
		super("ANY");

	}
	
	/**
	 * Sets the list of attributes that are used as triggers for excluding the documents from the result set
	 * of documents retrieved from the database.
	 * 
	 * @param triggers	a {@link String} array containing the attributes identifying the document to be excluded.
	 */
	public void setExcludeTriggers(String... triggers) {
		
		this.excludeTriggers = triggers;
	}
	
	/**
	 * This method creates a view to retrieve all the documents that need to be converted to the new format
	 * which includes the <i>content</i> attribute and for each of the document retrieved moves all the 
	 * document specific attributes into a newly created <i>content</i> attribute.
	 * 
	 * @throws CouchDbTransformationException 	if there is any error while executing the conversion.
	 */
	public void execute() throws CouchDbTransformationException {
		
		try {
			
			super.execute();
			
		} finally {
			
			if (this.view != null) {
				
				this.connector.delete(this.view);
			}
		}
	}

	
	/**
	 * This method transforms the source document into the new format. The method first check whether the document
	 * contains the {@link CouchDbDocumentTransformation#DOCUMENT_CONTENT_ATTRIBUTE} and if not it creates this
	 * attribute and moves all the other document specific properties into that attribute. The properties that are
	 * excluded are: the unique identifier, the revision, and the attachments.
	 * 
	 * @param id		a {@link String} representing the unique identifier of the document to be transformed.
	 * @param source	a {@link Map} implementation representing the raw format of the document to be transformed.
	 * 
	 * @return	a {@link Map} implementation representing the raw format of the transformed document.
	 */
	protected Map<String, Object> transform(String id, Map<String,Object> source) throws CouchDbDocumentTransformationException {

		Map<String,Object> transformed = source;
		
		@SuppressWarnings("unchecked")
		Map<String,Object> content = (Map<String,Object>) source.get(CouchDbDocumentTransformation.DOCUMENT_CONTENT_ATTRIBUTE);
		
		if (content == null) {
		
			Map<String,Object> wrapped = MapUtils.clone(source, true);
			content = new HashMap<String,Object>();
			
			int size = wrapped.entrySet().size();
			
			Object[] entries = new Object[size];
			wrapped.entrySet().toArray(entries);
			for(int i=0; i<size; i++) {
				
				@SuppressWarnings("unchecked")
				Entry<String,Object> pair = (Entry<String,Object>) entries[i];
				
				String key = pair.getKey();
				
				if ((key.equals(CouchDbContentTransformation.COUCHDB_ATTACHMENTS) == false) &&
				    (key.equals(CouchDbContentTransformation.COUCHDB_REVISION) == false) &&
				    (key.equals(CouchDbContentTransformation.COUCHDB_ID) == false) &&
				    (key.startsWith(CouchDbContentTransformation.COUCHDB_DISCRIMINATOR_PREFIX) == false)) {
					
					Object value = wrapped.remove(key);
					content.put(key, value);
				}
			}
			
			wrapped.put(CouchDbDocumentTransformation.DOCUMENT_CONTENT_ATTRIBUTE, content);
			
			transformed = wrapped;
		
		}
				
		return transformed;
	}
	
	/**
	 * <p>
	 * This method creates a {@link ViewQuery} instance that can be used to select the portion of documents
	 * that are of interest for the transformation.
	 * </p>
	 * <p>
	 * The method overrides the base implementation of the method to generate a temporary view and store it
	 * into the database for retrieving all the documents that do not have properties within the specific
	 * array of <i>excludeTriggers</i>.
	 * </p>
	 * 
	 * 
	 * @param documentType 	a {@link String} representing the name of the document that is of interest for
	 * 						the selection. This specific parameter (in this implementation) does not map any
	 * 						document type.
	 * 
	 * @return	a {@link ViewQuery} object that is bound to the dynamically created view used to retrieve
	 * 			all those documents that do not contain the attributes mentioned in the exclude triggers
	 * 			array.
	 */
	@Override
	protected ViewQuery getViewQueryFor(String documentType) {
	
		if ((documentType == null) || (documentType.isEmpty() == true)) {
			
			throw new IllegalArgumentException("Parameter 'documentType' cannot be null or an empty string.");
		}
		
		String designDocId = CouchDbObjectModelMigrationPreparer.DESIGN_DOC_ID_PREFIX + "documentType";
		
		String condition = "true";
		if (this.excludeTriggers.length > 0) {
			
			condition = "!(doc." + this.excludeTriggers[0] + ")";
			for(int t=1; t<this.excludeTriggers.length; t++) {
				condition += " && !(doc." + this.excludeTriggers[t] + ")";
			}
		}
		
		String map = "function(doc) { if (" +  condition +") { emit(null, doc._id); } }";
		
		DesignDocument designDoc = new DesignDocument();
		designDoc.setId(designDocId);
		
		
		
		// we construct the view that is used to retrieve all the documents
		// of a certain type. The type is 
		//
		View view = new View();
		view.setMap(map);
		designDoc.addView("all", view);
		
				
		try {
			
			this.connector.create(designDoc);
			this.view = designDoc;
			
			
		} catch(Exception ex) {
			
			LOGGER.error("Could not create temporary view for data retrieval.", ex);
		
		}
		

		
		ViewQuery vq = new ViewQuery();
		vq = vq.designDocId(designDocId)
			   .viewName("all")
			   .includeDocs(true);
		
		
		return vq;
	}
	
	/*******************************************/
	/**       THESE METHODS ARE NOT USED      **/
	/*******************************************/

	/**
	 * This method is supposed to provide the old type discriminator for a given
	 * <i>CouchDb</i> document. Since this transformation class does not perform
	 * a migration from one format to another of the specific document the feature
	 * is not used.
	 * 
	 * @return {@literal null}
	 */
	@Override
	protected String getOldTypeDiscriminator() {
		
		return null;
	}

	/**
	 * This method is supposed to provide the new type discriminator for a given
	 * <i>CouchDb</i> document. Since this transformation class does not perform
	 * a migration from one format to another of the specific document the feature
	 * is not used.
	 * 
	 * @return {@literal null}
	 */
	@Override
	protected String getNewTypeDiscriminator() {
		
		return null;
	}


	/**
	 * This method is supposed to provide the value of the type discriminator for a 
	 * given <i>CouchDb</i> document. Since this transformation class does not perform
	 * a migration from one format to another of the specific document the feature is
	 * not used.
	 * 
	 * @return {@literal null}
	 */
	@Override
	protected String getTypeDiscriminatorValue() {
		
		return null;
	}

	/**
	 * This method transforms the content of the {@link CouchDbDocumentTransformation#DOCUMENT_CONTENT_ATTRIBUTE}
	 * property. This method is not used in this transformation because, the purpose of this transformation is to
	 * ensure that each document (with its old content) has now this property, which will contain the specific
	 * attributes and it will be then further transformed.
	 * 
	 * @param id		a {@link String} representing the unique identifier of the document to be transformed.
	 * @param source	a {@link Map} implementation representing the raw format of the value of the <i>content</i>
	 * 					attribute to be transformed.
	 * 
	 * @return	{@literal null}, this method is not used.
	 * 
	 * @throws CouchDbDocumentTransformationException	this method does not throw any exception because its body
	 * 													is empty.
	 */
	@Override
	protected Map<String, Object> transformContent(String id, Map<String, Object> content) throws CouchDbDocumentTransformationException {
		
		return null;
	}

}
